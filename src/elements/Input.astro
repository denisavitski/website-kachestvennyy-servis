---
export interface Props {
  name?: string
  placeholder?: string
  type?: astroHTML.JSX.HTMLInputTypeAttribute | 'phone'
  class?: string
  required?: boolean
  staticError?: boolean | 'mobile'
  emptyError?: string
  fillError?: string
}

const {
  class: className,
  name = 'dev',
  placeholder = 'dev',
  type = 'text',
  staticError = false,
  emptyError = 'Заполните поле',
  fillError = '',
  required,
  ...rest
} = Astro.props
---

<e-input
  {...rest}
  class:list={['input', className]}
  data-type={type}
>
  <label class="visually-hidden">
    {placeholder}
    <input
      type={type === 'phone' ? 'text' : type}
      {required}
      class="input__native"
      {name}
    />
  </label>

  <span class="input__content">
    <span
      class="font-p2 font-mob-p3 input__editable"
      contenteditable
    ></span>

    <span
      class="font-p2 font-mob-p3 input__placeholder"
      aria-hidden="true"
      >{placeholder}</span
    >
  </span>

  <span
    class:list={['font-p2 font-mob-p3 input__error']}
    data-static={staticError}
    aria-hidden="true"
    data-fill-error={fillError}
    data-empty-error={emptyError}
  ></span>
</e-input>

<style is:global>
  .input {
    --text-color: var(--color-primary);
    --placeholder-color: var(--color-button);
    --border-color: var(--color-button);
    --placeholder-transform: 0;
    --error-opacity: 0;
    --min-height: 7rem;
    --padding: 2rem;
    --offset: 1rem;
    --duration: 0.3s;

    position: relative;

    display: flex;
    flex-direction: column;
    height: max-content;

    min-height: var(--height, var(--min-height));

    transition: border-color var(--duration);

    &:focus-within,
    &.has-data {
      --placeholder-transform: 1;
    }

    &.error {
      --border-color: var(--color-error);
      --error-opacity: 1;
    }

    @media (max-width: 768px) {
      --min-height: 6rem;
    }
  }

  .input__content {
    width: 100%;
    min-height: var(--height, var(--min-height));
    padding: 0 var(--padding);

    border: 0.1rem solid var(--border-color);
    border-radius: 2rem;
    background-color: var(--color-surface);
  }

  .input__editable {
    display: block;

    width: 100%;
    min-height: var(--height, var(--min-height));

    padding: var(--padding) 0;

    cursor: text;

    vertical-align: middle;

    outline: none;

    color: var(--text-color);

    transition: color var(--duration);
  }

  .input__placeholder {
    position: absolute;
    bottom: 100%;
    left: var(--padding);

    pointer-events: none;

    color: var(--placeholder-color);

    transform: translateY(
      calc(
        (var(--min-height) / 2 + 50%) * (1 - var(--placeholder-transform)) + var(--offset) *
          var(--placeholder-transform) * -1
      )
    );

    transition:
      color var(--duration),
      transform var(--duration);

    will-change: transform;
  }

  .input__error {
    position: absolute;
    top: calc(100% + var(--offset));
    left: var(--padding);

    color: var(--color-error);

    opacity: var(--error-opacity);

    transition:
      opacity var(--duration),
      height var(--duration),
      margin-bottom var(--duration);

    &[data-static=''] {
      position: relative;
      height: 0;
      left: 0;
      overflow: hidden;
      top: var(--offset);
      margin-left: var(--padding);
    }

    .input.error &[data-static=''] {
      height: 3rem;
      margin-bottom: var(--offset);
    }

    @media (max-width: 768px) {
      &[data-static='mobile'] {
        display: none;
        position: unset;
        margin-top: var(--offset);
      }

      .input.error &[data-static='mobile'] {
        display: block;
      }
    }
  }
</style>

<script>
  export interface InputElementEvents {
    resetInput: CustomEvent
  }

  export class InputElement extends HTMLElement {
    #nativeInputElement: HTMLInputElement | null = null
    #editableElement: HTMLElement | null = null
    #errorElement: HTMLElement | null = null
    #isError = false
    #isPhoneInput = false
    #emptyErrorText = ''
    #fillErrorText = ''

    constructor() {
      super()

      this.addEventListener('resetInput', () => {
        this.reset()
      })
    }

    public validate() {
      if (this.#nativeInputElement && !this.#nativeInputElement.validity.valid) {
        this.#showError()
      } else {
        this.#hideError()
      }
    }

    public reset() {
      if (this.#editableElement) {
        this.#editableElement!.textContent = ''
        this.#editableElement.dispatchEvent(new Event('input'))
      }
    }

    protected connectedCallback() {
      this.#nativeInputElement = this.querySelector('.input__native')
      this.#editableElement = this.querySelector('.input__editable')
      this.#errorElement = this.querySelector('.input__error')

      this.#emptyErrorText = this.#errorElement?.getAttribute('data-empty-error') || ''

      this.#fillErrorText = this.#errorElement?.getAttribute('data-fill-error') || ''

      this.#isPhoneInput = this.getAttribute('data-type') === 'phone'

      this.#editableElement?.addEventListener('input', this.#inputListener)
      this.#editableElement?.addEventListener('focus', this.#focusListener)
      this.#editableElement?.addEventListener('blur', this.#blurListener)
    }

    protected disconnectedCallback() {
      this.#editableElement?.removeEventListener('input', this.#inputListener)
      this.#editableElement?.addEventListener('focus', this.#focusListener)
      this.#editableElement?.removeEventListener('blur', this.#blurListener)
    }

    #inputListener = () => {
      let value = this.#editableElement!.textContent?.trim() || ''

      if (this.#isPhoneInput && value) {
        value = this.#maskPhoneValue(value)
        this.#editableElement!.textContent = value

        const sel = window.getSelection()

        if (sel) {
          sel.selectAllChildren(this.#editableElement!)
          sel.collapseToEnd()
        }
      }

      if (this.#nativeInputElement) {
        this.#nativeInputElement.value = value

        if (value) {
          this.classList.add('has-data')
        } else {
          this.classList.remove('has-data')
        }

        if (this.#nativeInputElement && this.#isPhoneInput) {
          if (this.#nativeInputElement.value.length < 18) {
            this.#nativeInputElement.setCustomValidity(this.#fillErrorText)
          } else {
            this.#nativeInputElement.setCustomValidity('')
          }
        }

        this.#nativeInputElement.dispatchEvent(new Event('input'))

        if (this.#isError && value) {
          this.#hideError()
        }
      }
    }

    #focusListener = () => {
      if (this.#isPhoneInput) {
        const text = this.#editableElement!.textContent

        if (!text) {
          this.#editableElement!.textContent = this.#maskPhoneValue('1')
        }

        this.#inputListener()
      }
    }

    #blurListener = () => {
      this.validate()
    }

    #showError() {
      this.#isError = true

      if (this.#errorElement) {
        const message = !this.#nativeInputElement?.value
          ? this.#emptyErrorText
          : this.#fillErrorText

        this.#errorElement.textContent = message

        this.#errorElement.setAttribute('aria-hidden', 'false')
      }

      this.classList.add('error')
    }

    #hideError() {
      this.#isError = false

      this.classList.remove('error')
      this.#errorElement?.setAttribute('aria-hidden', 'true')
    }

    #maskPhoneValue(value: string) {
      let unmasked = value.replace(/\D/g, '').match(/(\d{0,1})(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})/)

      if (unmasked) {
        if (!unmasked.input) {
          return ''
        }

        const masked =
          `+7 (${unmasked[2]}` +
          (unmasked[3] ? `) ${unmasked[3]}` : '') +
          (unmasked[4] ? `-${unmasked[4]}` : '') +
          (unmasked[5] ? `-${unmasked[5]}` : '') +
          (unmasked[6] ? `-${unmasked[6]}` : '')

        value = masked.slice(0, 19)
      } else {
        value = ''
      }

      return value
    }
  }

  if (!customElements.get('e-input')) {
    customElements.define('e-input', InputElement)
  }

  declare global {
    interface HTMLElementTagNameMap {
      'e-input': InputElement
    }

    interface HTMLElementEventMap extends InputElementEvents {}
  }
</script>
